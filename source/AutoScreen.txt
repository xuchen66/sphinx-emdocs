ScriptName AutoScreen
#### co-Author: Chen Xu chen.xu@umassmed.edu
#### co-Author: Albert Xu alberttxu@gmail.com
#### Date: Apr 22, 2021
# script to find mesh and holes and take shot for all.
# it works for multiple cartridges.

#### prerequisite ####
# 1. LD setup Search for LMM & R to cover single hole like 17.5kX
# 2a. C2 and OBJ apertures are centered
# 2b. AutoIT-Talos script running on Talos computer 
# 3. Script "Cars" is setup 
# 4. shift offset is set below
# 5. offset value in Script Z has been setup right
# 6. InputDirect is disabled 
# 7. before start, Eucentric focus for R is set right

# define shifts between LMM and V mag (from shift to Marker)
xShift = 8.37
yShift = 3.4

# define how many meshes and holes to find
meshes = 4
holes = 3

# targetDefocus 
tarDef = -2.ReadOnlyUnlessAdmin

# dir, cartridge and grids info
Call Cars

LocalLoopIndexes

#### main loop ####
AllowFileOverwrite 1

ResetClock

Loop $#cat catInd   

   # cartridges and sample name varivable to be used globally 
   cat = $cat[$catInd]
   name = $name[$catInd]
   Echo ===> Runnning on car $cat and grid $name ...

   # close valves, load cartridge and load aperture 
   SetColumnOrGunValve 0
   LoadCartridge $cat
   Echo    >>> LoadCartridge $cat <<<
   SetNavRegistration $cat
   Echo    >>> Change Aperture 150 0 <<<
   CallFunction Aperture 150 0   
   
   ## LMM montaging 
   MoveStageTo 0 0
   OpenNewMontage 0 0 LMM-Car$cat-$name.st
   SetColumnOrGunValve 1
   Montage
   NewMap
   CloseFile
   SaveNavigator nav-today.nav

   ## find mesh from this LMM map and go through each mesh found 
   ReportOtherItem -1                      
   LMMIndex = $navIndex
   # add mesh point items by external Python
   CallFunction findMeshes $meshes         
   # find last added point to how many meshes added 
   ReportOtherItem -1                           
   lastIndex = $navIndex
   numMesh = $lastIndex - $LMMIndex

   # skip to next grid if nothing is found 
   If $numMesh == 0 
      Echo !!! did not find any mesh, skip ... !!!
      Continue 
   Endif

   # snapshot the LMM and with nav mesh points on 
   SnapshotToFile 1 1 1 JPG JPG LMM-Car$cat-$name.jpg

   ## run each of the meshes found 
   CallFunction AutoMesh

   ReportClock 
EndLoop

# save Nav file 
#SaveNavigator nav.nav 

###################################################################################
Function AutoMesh 0 0 
# Go through each mesh found and do following:
#   a. fix Z, update it 
#   b. make MMM montage map 

Echo   ---> Running Automesh ...
Echo $name

Loop $numMesh ind 
   meshIndex = $LMMIndex + $ind 

   # get ready to realign to the mesh 
   Echo >>> Enabling LMM realign <<< 
   SetProperty RealignItemMaxLMfield 700   # enable LMM Realign
   Echo >>> Change Aperture 150 0 <<<
   CallFunction Aperture 150 0      # obj = 0 -> out 

   # get mesh label and realign to it.
   ReportOtherItem $meshIndex
   meshLabel = $navLabel
   RealignToOtherItem $meshIndex 0         # realign to the mesh 
   ResetImageShift 2
   Copy A P 
   AcquireToMatchBuffer P 
   AlignTo P 0 1
   
   # allow lenses to settle
   GoToLowDoseArea V
   # Delay 5 min 

   # make sure the area is OK, otherwise skip 
   # based on normalized SD. 
   Echo >>> Change Aperture 50 70 <<<
   CallFunction Aperture 50 70 
   V
   ReportMeanCounts A 2
   normSD = $repVal2 / $repVal1
   If $normSD < 0.17
      echo >>> normSD < 0.17, No enough contrast, skipping this mesh ...<<<
     Continue 
   else
      echo normSD = $normSD  
   Endif 

   # MMM - View mag, fix Z  
   Echo >>> Disabling LMM realign <<< 
   SetProperty RealignItemMaxLMfield 3.5
   MoveStage $xShift $yShift 
   Call Z                                  
   UpdateItemZ

   # MMM map 
   SetUserSetting MontageUseViewInLD 1 1
   SetUserSetting MontageAlignPieces 1 1
   SetUserSetting MontageVerySloppy 0 1
   AllowFileOverwrite 1
   #OpenNewMontage 4 6 MMM_car$cat_$name_mesh$meshLabel.map
   OpenNewMontage 1 2 MMM_car$cat_$name_mesh$meshLabel.map
   SetMontageParams 1 576 410 5760 4092 1 1        
   Echo   --> Acquire MMM map ...
   Montage 
   NewMap 
   CloseFile

   # find holes and how many 
   ReportOtherItem -1  
   MMMIndex = $navIndex
   CallFunction findHoles $holes
   # last found point 
   ReportOtherItem -1                      # last item after adding new meshes 
   lastIndex = $navIndex 
   numHole = $lastIndex - $MMMIndex

   # skip to next mesh if no hole is found from this one 
   If $numHole == 0 
      Echo !!! No holes are found, skip to next mesh ... !!!   
   Endif

   # snapshot for the map and nav drawn info 
   SnapshotToFile 1 1 1 JPG JPG MMM_car$cat_$name_mesh$meshLabel.jpg 

   CallFunction HoleShot $tarDef
EndLoop 

EndFunction 

####################################################################################
Function HoleShot 1 0 tarDef 
   Echo ---> Running holeShot function ...
   OpenNewFile R_$name_mesh$meshLabel.mrc

Loop $numHole ind
   holeIndex = $MMMIndex + $ind
   ReportOtherItem $holeIndex 
   holeLabel = $navLabel 
   RealignToOtherItem $holeIndex 0
   Echo --> take hole $holeLabel <--
   
   # Smart beam centering, in case beam off too much  
   Echo >>> Smart Beam Centering <<<
   SetUserSetting LowDoseTieFocusTrial 0  
   GoToLowDoseArea T
   UpdateLowDoseParams T 
   ChangeMag -3
   T 
   CenterBeamFromImage
   RestoreLowDoseParams T
   RestoreLowDoseParams F
   AutoCenterBeam 
   # focus 
   SetTargetDefocus $tarDef
   G
   # shot & save 
   R
   S
   # make JPG too 
   ReduceImage A 2
   SaveToOtherFile A JPG JPG R_car$cat_$name_mesh$meshLabel_hole$holeLabel.jpg
   
EndLoop 
CloseFile
EndFunction 

####################################################################################
Function Aperture 2 0 c2 obj
# requires AutoIT-Talos.txt running on Talos
# C2 = 150, 70, 50, 30
# Obj = 70, 100, 0           ; 0 = out 
SetupScopeMessage 0 0 C2_$c2-OBJ_$obj
ShowMessageOnScope SEM
EndFunction

####################################################################################
Function findMeshes 1 0 numMesh
call Cars 

Debug = 0

### semmatch arguments
maxPts = $numMesh      # return subset of all found points
minSize = 40          # (microns) - find squares at least this size
minBorder = 100        # (microns) - find squares at least this far away from the edge of the map

# maps will be dynamically binned down to the following pixel size

acquire = 0            # "A" or not ( True = 1 ; False = 0 )

# names of temporary files used by semmatch
outputNav = semmatch_nav.nav
image = LMM.jpg

ReportIfNavOpen
If $reportedValue1 != 2
   Exit
Endif
ReportNavFile 1
navfile = $reportedValue1$reportedValue2
navdir = $reportedValue3
navdir = $rootDir
echo $navdir
SetDirectory $navdir
SaveNavigator

If $acquire != 1 AND $acquire != 0
   Echo acquire should be either 1 or 0
   Exit
Endif

If $Debug == 1
   debugStr = /k
ElseIf $Debug == 0
   debugStr = /c
Else
   Echo Debug should be either 1 or 0
   Exit
Endif

## load and bin MMM map
ReportNavItem
If $RepVal5 != 2        # if not a map item
   Echo Not a map item. Select a Map item from the navigator.
   Exit
Endif
MAP = $navLabel
Echo Map Label: $MAP
# load map into Q buffer
SetUserSetting BufferToReadInto 16
SetUserSetting LoadMapsUnbinned 1
# uncheck Montage Controls "Align pieces in overview"
ReportUserSetting MontageAlignPieces alignChecked
If $alignChecked == 1
   SetUserSetting MontageAlignPieces 0
Endif
LoadNavMap

ImageProperties Q width height
pixelsize = $repVal5

Copy Q A
Show Q

## make a jpeg image
SaveToOtherFile A JPG JPG $image
Echo saved $image

ReportOtherItem -1
newLabel = $navIntLabel + 1

RunInShell cmd $debugStr "conda activate semmatch && \
semmatch \
--navfile $navfile \
--mapLabel $MAP \
--newLabel $newLabel \
--output $outputNav \
--acquire $acquire \
--image $image \
--pixelsize $pixelsize \
findMeshes --maxPts $maxPts --minSize $minSize --minBorder $minBorder"

MergeNavFile $outputNav
If $alignChecked == 1
   SetUserSetting MontageAlignPieces 1
Endif
Show Q
EndFunction 

############################################################################
Function findHoles 1 0 numHoles
call Cars
# If something goes wrong, set Debug = 1
Debug = 0               # True = 1 ; False = 0

### semmatch arguments
param2 = 35             # hough threshold
maxPts = $numHoles      # return subset of all found points

acquire = 0             # add "A" (True = 1 ; False = 0)

# names of temporary files used by semmatch
outputNav = semmatch_nav.nav
image = MMM.jpg

ReportIfNavOpen
If $reportedValue1 != 2
   Exit
Endif
ReportNavFile 1
navfile = $reportedValue1$reportedValue2
navdir = $reportedValue3
navdir = $rootDir 
SetDirectory $navdir
SaveNavigator

If $acquire != 1 AND $acquire != 0
   Echo acquire should be either 1 or 0
   Exit
Endif

If $Debug == 1
   debugStr = /k
ElseIf $Debug == 0
   debugStr = /c
Else
   Echo Debug should be either 1 or 0
   Exit
Endif

## load and bin MMM map
ReportNavItem
If $RepVal5 != 2        # if not a map item
   Echo Not a map item. Select a Map item from the navigator.
   Exit
Endif
MAP = $navLabel
Echo Map Label: $MAP
SetUserSetting BufferToReadInto 16
SetUserSetting LoadMapsUnbinned 1
# uncheck Montage Controls "Align pieces in overview"
ReportUserSetting MontageAlignPieces alignChecked
If $alignChecked == 1
   SetUserSetting MontageAlignPieces 0
Endif
LoadNavMap

# reduce image if original pixelsize < 40 nm
normalizedPixelsize = 40
ImageProperties Q
origPixelsize = $repVal5

If $origPixelsize < $normalizedPixelsize
   reduction = $normalizedPixelsize / $origPixelsize
   ReduceImage Q $reduction
Else
   Copy Q A
   reduction = 1
Endif
Show Q

ImageProperties A
pixelsize = $repVal5

## make a jpeg image
SaveToOtherFile A JPG JPG $image
Echo saved $image

ReportOtherItem -1
newLabel = $navIntLabel + 1

RunInShell cmd $debugStr "conda activate semmatch && \
semmatch \
--navfile $navfile \
--mapLabel $MAP \
--newLabel $newLabel \
--output $outputNav \
--acquire $acquire \
--image $image \
--pixelsize $pixelsize \
houghCircles --reduction $reduction --maxPts $maxPts --param2 $param2 "

MergeNavFile $outputNav
If $alignChecked == 1
   SetUserSetting MontageAlignPieces 1
Endif
Show Q
EndFunction 
